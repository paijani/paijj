---
title: "Paijj"
author: "Paijani Sheth"
format: revealjs
editor: visual
---

# Outline

-   Intro
-   Functions
    -   missing_gone
        -   Example with conflict data
        -   Example with HEAL-SL data
    -   imp_methods
        -   Examples
-   Limitations/Future Directions

# Intro

Data cleaning is well-known to be a long and tedious process in data analysis. An important part of that process involves handling missing data. The purpose of Paijj is to make the user's life easier when handling missing data, by increasing its speed and efficiency.

# Functions

-   missing_gone

-   imp_methods

## missing_gone

This function will remove all the variables in your data set that have a percentage of missing data above your defined threshold.

Input:

-   data- raw data frame

-   threshold- percent of missing data threshold

-   exclude - any variables you need to keep, even if missingness is above the threshold

Output:

-   A more clean data frame

### Example with conflict data

To illustrate the efficiency of this function, let's first go over what we would do if we didn't have this function.

Example data will be the conflict data

```{r}
library(here)
conflict_data <- read.csv(here("data-raw", "conflict_data.csv"))
conflict_data
```

The number of columns in this data set is 19

```{r}
ncol(conflict_data)
```

Based on the imputation lecture maternal mortality was the only variable with over 10% missing data.

```{r}
#confirm that maternal mortality rate had above 10% missingness 
mean(is.na(conflict_data$`Maternal Mortality rate`))*100
```

Let's attempt to remove variables above the 10% threshold without missing_gone first.

```{r}
# Set the threshold percentage 
threshold_percentage <- 10  
# Count the number of missing values in each column 
missing_values_count <- colSums(is.na(conflict_data))  
# Calculate the total number of observations in each column 
total_values <- nrow(conflict_data)  
# Calculate the percentage of missing values in each column 
percentage_missing <- (missing_values_count / total_values) * 100  
# Identify columns with missing values exceeding the threshold 
columns_above_threshold <- names(percentage_missing[percentage_missing > threshold_percentage])  
# Create a new dataset with columns below the threshold 
conflict_data_new1 <- conflict_data[, setdiff(names(conflict_data), columns_above_threshold)] # Display the result
conflict_data_new1
```

```{r}
ncol(conflict_data_new1)
```

This is a lot of work!

With "missing_gone" we can achieve this result in one line

```{r}
library(paijj)
library(dplyr)
conflict_data_new2 <- missing_gone(conflict_data, threshold = 0.1)
conflict_data_new2
```

What if you wanted to conduct a linear regression with the outcome variable as maternal mortality. In that case, maternal mortality cannot be removed from the data set. In order to keep the threshold at 10% and keep maternal mortality in the data set, you can use the "exclude" argument.

This argument will make the chosen variable an exception, so even if it's missingness is above 10%, it is not removed.

```{r}
conflict_data_new3 <- missing_gone(conflict_data, threshold = 0.1, exclude = "Maternal Mortality rate") 
conflict_data_new3
```

### Example with HEAL-SL data

To illustrate further, let's use an example data set that has a lot more missing values. This is the adult round 2 data set from Healthy Sierra Leone (HEAL-SL) study, which essentially carries sociodemographic and symptom-related information of deceased individuals whose deaths were not medically recorded.

This data set has 367 columns currently.

```{r}
library(here) 
library(readr)
healsl <- read_csv(here("data-raw","healsl_rd1_adult_v1.csv")) 
healsl
```

```{r}
length(healsl)
```

```{r}
new_data_50 <- missing_gone(healsl, threshold = 0.5) 
length(new_data_50)
```

```{r}
new_data_10 <- missing_gone(healsl, threshold = 0.1) 
length(new_data_10)
```

Now we are left with 100 columns.

Depending on the threshold, there is likely still variables with missing values remaining in the data set. Another popular method of handling missing data is imputation. However, one of the issues with multiple imputation is selecting the appropriate imputation model for each variable.

## imp_methods

The purpose of this function is to make the selection process more user-friendly, efficient, and organized. Imp_methods provides the user with a list of univariate imputation methods for their imputation analysis based on the data type they want to impute. All methods are available in the "mice" package.

Input:

-   data_type: numeric, binary, ordinal, nominal

Output: List of the name and "mice" argument of imputation methods.

### Example

**Binary Data**

What if you wanted to impute a binary variable but didn't know what options there are.

```{r}
imp_methods("binary")
```

Without having to manually look for the imputation models to use in the mice documentation, imp_methods provides a user-friendly and easy to read list by filtering by your data type.

Numeric Data

```{r}
imp_methods("numeric")
```

Nominal Data

```{r}
imp_methods("nominal")
```

Ordinal Data

```{r}
imp_methods("ordinal")
```

# Limitations/Future Directions

-   For missing_gone, unable to see what variables are removed (ie. above the threshold).
    -   Future work can look into outputting a list of the column names that were removed.
-   For imp_methods, imputation methods can be filtered further. For example, by imputation level 1 and 2.
-   For imp_methods, more imputation methods can be added (beyond mice methods)

# GitHub Repository

<https://github.com/paijani/paijj>
